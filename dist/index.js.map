{"version":3,"file":"index.js","sources":["../src/helpers/helpers.js","../src/PreviewList.js","../src/SnackbarContentWrapper.js","../src/DropzoneArea.js","../src/DropzoneDialog.js"],"sourcesContent":["export function isImage(file) {\n    if (file.type.split('/')[0] === 'image') {\n        return true;\n    }\n}\nexport function convertBytesToMbsOrKbs(filesize) {\n    let size = '';\n    // I know, not technically correct...\n    if (filesize >= 1000000) {\n        size = (filesize / 1000000) + ' megabytes';\n    } else if (filesize >= 1000) {\n        size = (filesize / 1000) + ' kilobytes';\n    } else {\n        size = filesize + ' bytes';\n    }\n    return size;\n}\n\nexport async function createFileFromUrl(url) {\n    const response = await fetch(url);\n    const data = await response.blob();\n    const metadata = {type: data.type};\n    const filename = url.replace(/\\?.+/, '').split('/').pop();\n    const ext = data.type.split('/').pop();\n    return new File([data], `${filename}.${ext}`, metadata);\n}\n","import Chip from '@material-ui/core/Chip';\nimport Fab from '@material-ui/core/Fab';\nimport Grid from '@material-ui/core/Grid';\nimport {withStyles} from '@material-ui/core/styles';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {isImage} from './helpers/helpers.js';\n\nconst styles = {\n    removeBtn: {\n        transition: '.5s ease',\n        position: 'absolute',\n        opacity: 0,\n        top: -5,\n        right: -5,\n        width: 40,\n        height: 40,\n    },\n    smallPreviewImg: {\n        height: 100,\n        width: 'initial',\n        maxWidth: '100%',\n        marginTop: 5,\n        marginRight: 10,\n        color: 'rgba(0, 0, 0, 0.87)',\n        transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\n        boxSizing: 'border-box',\n        boxShadow: 'rgba(0, 0, 0, 0.12) 0 1px 6px, rgba(0, 0, 0, 0.12) 0 1px 4px',\n        borderRadius: 2,\n        zIndex: 5,\n        opacity: 1,\n    },\n    imageContainer: {\n        position: 'relative',\n        zIndex: 10,\n        textAlign: 'center',\n        '&:hover $smallPreviewImg': {\n            opacity: 0.3,\n        },\n        '&:hover $removeBtn': {\n            opacity: 1,\n        },\n    },\n};\n\nfunction PreviewList(props) {\n    const {fileObjects, handleRemove, showFileNames, useChipsForPreview, previewChipProps, classes} = props;\n    if (useChipsForPreview) {\n        return (\n            fileObjects.map((fileObject, i) => {\n                return (<div key={i}>\n                    <Chip\n                        label={fileObject.file.name}\n                        onDelete={handleRemove(i)}\n                        variant=\"outlined\"\n                        {...previewChipProps}\n                    />\n                </div>);\n            })\n        );\n    }\n    return (\n        <Grid container={true} spacing={8}>\n            {\n                fileObjects.map((fileObject, i) => {\n                    const img = (isImage(fileObject.file) ?\n                        <img className={classes.smallPreviewImg} role=\"presentation\" src={fileObject.data} /> :\n                        <AttachFileIcon className={classes.smallPreviewImg} />\n                    );\n                    return (\n                        <Grid\n                            item={true} xs={4} key={i}\n                            className={classes.imageContainer}\n                        >\n                            {img}\n\n                            {showFileNames &&\n                                <p>{fileObject.file.name}</p>\n                            }\n\n                            <Fab\n                                onClick={handleRemove(i)}\n                                aria-label=\"Delete\"\n                                className={classes.removeBtn}\n                            >\n                                <DeleteIcon />\n                            </Fab>\n                        </Grid>\n                    );\n                })\n            }\n        </Grid>\n    );\n}\n\nPreviewList.propTypes = {\n    classes: PropTypes.object.isRequired,\n    fileObjects: PropTypes.arrayOf(PropTypes.object).isRequired,\n    handleRemove: PropTypes.func.isRequired,\n    showFileNames: PropTypes.bool,\n    useChipsForPreview: PropTypes.bool,\n    previewChipProps: PropTypes.object,\n};\n\nexport default withStyles(styles)(PreviewList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport {withStyles} from '@material-ui/core/styles';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nconst styles = (theme) => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.dark,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n});\n\nfunction SnackbarContentWrapper(props) {\n    const {classes, className, message, onClose, variant, ...other} = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                    {message}\n                </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"Close\"\n                    color=\"inherit\"\n                    className={classes.close}\n                    onClick={onClose}\n                >\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nSnackbarContentWrapper.propTypes = {\n    classes: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    message: PropTypes.node,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nexport default withStyles(styles)(SnackbarContentWrapper);\n","import Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport {withStyles} from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, {Component, Fragment} from 'react';\nimport Dropzone from 'react-dropzone';\nimport {convertBytesToMbsOrKbs, createFileFromUrl} from './helpers/helpers';\nimport PreviewList from './PreviewList';\nimport SnackbarContentWrapper from './SnackbarContentWrapper';\nconst styles = {\n    '@keyframes progress': {\n        '0%': {\n            backgroundPosition: '0 0',\n        },\n        '100%': {\n            backgroundPosition: '-70px 0',\n        },\n    },\n    dropZone: {\n        position: 'relative',\n        width: '100%',\n        minHeight: '250px',\n        backgroundColor: '#F0F0F0',\n        border: 'dashed',\n        borderColor: '#C8C8C8',\n        cursor: 'pointer',\n        boxSizing: 'border-box',\n    },\n    stripes: {\n        border: 'solid',\n        backgroundImage: 'repeating-linear-gradient(-45deg, #F0F0F0, #F0F0F0 25px, #C8C8C8 25px, #C8C8C8 50px)',\n        animation: 'progress 2s linear infinite !important',\n        backgroundSize: '150% 100%',\n    },\n    rejectStripes: {\n        border: 'solid',\n        backgroundImage: 'repeating-linear-gradient(-45deg, #fc8785, #fc8785 25px, #f4231f 25px, #f4231f 50px)',\n        animation: 'progress 2s linear infinite !important',\n        backgroundSize: '150% 100%',\n    },\n    dropzoneTextStyle: {\n        textAlign: 'center',\n    },\n    uploadIconSize: {\n        width: 51,\n        height: 51,\n        color: '#909090',\n    },\n    dropzoneParagraph: {\n        fontSize: 24,\n    },\n};\n\n\nclass DropzoneArea extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fileObjects: [],\n            openSnackBar: false,\n            snackbarMessage: '',\n            snackbarVariant: 'success',\n            dropzoneText: props.dropzoneText,\n        };\n    }\n\n    componentDidMount() {\n        this.filesArray(this.props.initialFiles);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.dropzoneText !== prevProps.dropzoneText) {\n            this.setState({\n                dropzoneText: this.props.dropzoneText,\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            });\n        }\n    }\n\n    async filesArray(urls) {\n        try {\n            for (const url of urls) {\n                const file = await createFileFromUrl(url);\n                const reader = new FileReader();\n                reader.onload = (event) => {\n                    this.setState({\n                        fileObjects: this.state.fileObjects.concat({\n                            file: file,\n                            data: event.target.result,\n                        }),\n                    });\n                };\n                reader.readAsDataURL(file);\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    onDrop(files) {\n        const _this = this;\n        if (this.props.filesLimit > 1 && this.state.fileObjects.length + files.length > this.props.filesLimit) {\n            this.setState({\n                openSnackBar: true,\n                snackbarMessage: this.props.getFileLimitExceedMessage(this.props.filesLimit),\n                snackbarVariant: 'error',\n            });\n        } else {\n            let count = 0;\n            let message = '';\n            if (!Array.isArray(files)) files = [files];\n\n            files.forEach((file) => {\n                const reader = new FileReader();\n                reader.onload = (event) => {\n                    _this.setState({\n                        fileObjects: this.props.filesLimit <= 1 ?\n                            [\n                                {\n                                    file: file,\n                                    data: event.target.result,\n                                },\n                            ] :\n                            _this.state.fileObjects.concat(\n                                {\n                                    file: file,\n                                    data: event.target.result,\n                                }\n                            ),\n                    },\n                    () => {\n                        if (this.props.onChange) {\n                            this.props.onChange(_this.state.fileObjects.map((fileObject) => fileObject.file));\n                        }\n                        if (this.props.onDrop) {\n                            this.props.onDrop(file);\n                        }\n                        message += this.props.getFileAddedMessage(file.name);\n                        count++; // we cannot rely on the index because this is asynchronous\n                        if (count === files.length) {\n                            // display message when the last one fires\n                            this.setState({\n                                openSnackBar: true,\n                                snackbarMessage: message,\n                                snackbarVariant: 'success',\n                            });\n                        }\n                    });\n                };\n                reader.readAsDataURL(file);\n            });\n        }\n    }\n\n    handleRemove = (fileIndex) => (event) => {\n        event.stopPropagation();\n        const {fileObjects} = this.state;\n        const file = fileObjects.filter((fileObject, i) => {\n            return i === fileIndex;\n        })[0].file;\n        fileObjects.splice(fileIndex, 1);\n        this.setState(fileObjects, () => {\n            if (this.props.onDelete) {\n                this.props.onDelete(file);\n            }\n            if (this.props.onChange) {\n                this.props.onChange(this.state.fileObjects.map((fileObject) => fileObject.file));\n            }\n            this.setState({\n                openSnackBar: true,\n                snackbarMessage: this.props.getFileRemovedMessage(file.name),\n                snackbarVariant: 'info',\n            });\n        });\n    };\n\n    handleDropRejected(rejectedFiles, evt) {\n        let message = '';\n        rejectedFiles.forEach((rejectedFile) => {\n            message = this.props.getDropRejectMessage(\n                rejectedFile,\n                this.props.acceptedFiles,\n                this.props.maxFileSize\n            );\n        });\n        if (this.props.onDropRejected) {\n            this.props.onDropRejected(rejectedFiles, evt);\n        }\n        this.setState({\n            openSnackBar: true,\n            snackbarMessage: message,\n            snackbarVariant: 'error',\n        });\n    }\n\n    handleCloseSnackbar = () => {\n        this.setState({\n            openSnackBar: false,\n        });\n    };\n\n    render() {\n        const {classes} = this.props;\n        const showPreviews = this.props.showPreviews && this.state.fileObjects.length > 0;\n        const showPreviewsInDropzone = this.props.showPreviewsInDropzone && this.state.fileObjects.length > 0;\n\n        return (\n            <Fragment>\n                <Dropzone\n                    accept={this.props.acceptedFiles.join(',')}\n                    onDrop={this.onDrop.bind(this)}\n                    onDropRejected={this.handleDropRejected.bind(this)}\n                    className={clsx(this.props.dropzoneClass, classes.dropZone)}\n                    acceptClassName={classes.stripes}\n                    rejectClassName={classes.rejectStripes}\n                    maxSize={this.props.maxFileSize}\n                    multiple={this.props.filesLimit > 1}\n                >\n                    <div className={classes.dropzoneTextStyle}>\n                        <p className={clsx(classes.dropzoneParagraph, this.props.dropzoneParagraphClass)}>\n                            {this.state.dropzoneText}\n                        </p>\n                        <CloudUploadIcon className={classes.uploadIconSize} />\n                    </div>\n                    {showPreviewsInDropzone &&\n                        <PreviewList\n                            fileObjects={this.state.fileObjects}\n                            handleRemove={this.handleRemove.bind(this)}\n                            showFileNames={this.props.showFileNames}\n                            useChipsForPreview={this.props.useChipsForPreview}\n                            previewChipProps={this.props.previewChipProps}\n                        />\n                    }\n                </Dropzone>\n                {showPreviews &&\n                    <Fragment>\n                        <Grid container={true}>\n                            <span>Preview:</span>\n                        </Grid>\n                        <PreviewList\n                            fileObjects={this.state.fileObjects}\n                            handleRemove={this.handleRemove.bind(this)}\n                            showFileNames={this.props.showFileNamesInPreview}\n                            useChipsForPreview={this.props.useChipsForPreview}\n                            previewChipProps={this.props.previewChipProps}\n                        />\n                    </Fragment>\n                }\n                {this.props.showAlerts &&\n                    <Snackbar\n                        anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'left',\n                        }}\n                        open={this.state.openSnackBar}\n                        autoHideDuration={6000}\n                        onClose={this.handleCloseSnackbar}\n                    >\n                        <SnackbarContentWrapper\n                            onClose={this.handleCloseSnackbar}\n                            variant={this.state.snackbarVariant}\n                            message={this.state.snackbarMessage}\n                        />\n                    </Snackbar>\n                }\n            </Fragment>\n        );\n    }\n}\n\nDropzoneArea.defaultProps = {\n    acceptedFiles: ['image/*', 'video/*', 'application/*'],\n    filesLimit: 3,\n    maxFileSize: 3000000,\n    dropzoneText: 'Drag and drop an image file here or click',\n    showPreviews: false, // By default previews show up under in the dialog and inside in the standalone\n    showPreviewsInDropzone: true,\n    showFileNames: false,\n    showFileNamesInPreview: false,\n    previewChipProps: {},\n    showAlerts: true,\n    clearOnUnmount: true,\n    initialFiles: [],\n    getFileLimitExceedMessage: (filesLimit) => (`Maximum allowed number of files exceeded. Only ${filesLimit} allowed`),\n    getFileAddedMessage: (fileName) => (`File ${fileName} successfully added.`),\n    getFileRemovedMessage: (fileName) => (`File ${fileName} removed.`),\n    getDropRejectMessage: (rejectedFile, acceptedFiles, maxFileSize) => {\n        let message = `File ${rejectedFile.name} was rejected. `;\n        if (!acceptedFiles.includes(rejectedFile.type)) {\n            message += 'File type not supported. ';\n        }\n        if (rejectedFile.size > maxFileSize) {\n            message += 'File is too big. Size limit is ' + convertBytesToMbsOrKbs(maxFileSize) + '. ';\n        }\n        return message;\n    },\n    onChange: () => { },\n    onDrop: () => { },\n    onDropRejected: () => { },\n    onDelete: () => { },\n};\nDropzoneArea.propTypes = {\n    classes: PropTypes.object.isRequired,\n    acceptedFiles: PropTypes.array,\n    filesLimit: PropTypes.number,\n    maxFileSize: PropTypes.number,\n    dropzoneText: PropTypes.string,\n    dropzoneClass: PropTypes.string,\n    dropzoneParagraphClass: PropTypes.string,\n    showPreviews: PropTypes.bool,\n    showPreviewsInDropzone: PropTypes.bool,\n    showFileNames: PropTypes.bool,\n    showFileNamesInPreview: PropTypes.bool,\n    useChipsForPreview: PropTypes.bool,\n    previewChipProps: PropTypes.object,\n    showAlerts: PropTypes.bool,\n    clearOnUnmount: PropTypes.bool,\n    initialFiles: PropTypes.arrayOf(PropTypes.string),\n    getFileLimitExceedMessage: PropTypes.func,\n    getFileAddedMessage: PropTypes.func,\n    getFileRemovedMessage: PropTypes.func,\n    getDropRejectMessage: PropTypes.func,\n    onChange: PropTypes.func,\n    onDrop: PropTypes.func,\n    onDropRejected: PropTypes.func,\n    onDelete: PropTypes.func,\n};\n\nexport default withStyles(styles)(DropzoneArea);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport React, {Fragment} from 'react';\nimport DropzoneArea from './DropzoneArea';\n\n\nclass DropzoneDialog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            files: [],\n            disabled: true,\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.open !== prevProps.open) {\n            this.setState({\n                open: this.props.open,\n            });\n            if (this.props.onClose && !this.props.open) {\n                this.props.onClose();\n            }\n        }\n\n        if (this.state.files.length !== prevState.files.length) {\n            this.setState({\n                disabled: this.state.files.length === 0,\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.clearOnUnmount) {\n            this.setState({\n                files: [],\n            });\n        }\n    }\n\n    handleClose(event) {\n        if (this.props.onClose) {\n            this.props.onClose(event);\n        }\n        this.setState({open: false});\n    }\n\n    onChange(files) {\n        if (this.props.logEvents) {\n            console.log('Files changed', files);\n        }\n        this.setState({\n            files: files,\n        }, () => {\n            if (this.props.onChange) {\n                this.props.onChange(files);\n            }\n        });\n    }\n\n    onDelete(file) { // this passes it on to the parent component to do with it what they will\n        if (this.props.logEvents) {\n            console.log('File removed', file);\n        }\n        if (this.props.onDelete) {\n            this.props.onDelete(file);\n        }\n    }\n\n    onDrop(files) { // this passes it on to the parent component to do with it what they will\n        if (this.props.logEvents) {\n            console.log('Files dropped', files);\n        }\n        if (this.props.onDrop) {\n            this.props.onDrop(files);\n        }\n    }\n\n    onDropRejected(files, evt) { // this passes it on to the parent component to do with it what they will\n        if (this.props.logEvents) {\n            console.log('Files rejected', files);\n        }\n        if (this.props.onDropRejected) {\n            this.props.onDropRejected(files, evt);\n        }\n    }\n    handleSaveClick() {\n        if (this.props.onSave) {\n            this.props.onSave(this.state.files);\n        }\n    }\n    render() {\n        return (\n            <Fragment>\n                <Dialog\n                    {...this.props.dialogProps}\n                    open={this.state.open}\n                    onClose={this.handleClose.bind(this)}\n                    maxWidth={this.props.maxWidth}\n                    fullWidth={this.props.fullWidth}\n                >\n                    <DialogTitle>{this.props.dialogTitle}</DialogTitle>\n                    <DialogContent>\n                        <DropzoneArea\n                            dropzoneText={this.props.dropzoneText}\n                            acceptedFiles={this.props.acceptedFiles}\n                            filesLimit={this.props.filesLimit}\n                            maxFileSize={this.props.maxFileSize}\n                            showPreviews={this.props.showPreviews}\n                            showPreviewsInDropzone={this.props.showPreviewsInDropzone}\n                            showFileNames={this.props.showFileNames}\n                            showAlerts={this.props.showAlerts}\n                            onChange={this.onChange.bind(this)}\n                            onDrop={this.onDrop.bind(this)}\n                            onDropRejected={this.onDropRejected.bind(this)}\n                            onDelete={this.onDelete.bind(this)}\n                            clearOnUnmount={this.props.clearOnUnmount}\n                            showFileNamesInPreview={this.props.showFileNamesInPreview}\n                            useChipsForPreview={this.props.useChipsForPreview}\n                            previewChipProps={this.props.previewChipProps}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            color=\"primary\"\n                            onClick={this.handleClose.bind(this)}\n                        >\n                            {this.props.cancelButtonText}\n                        </Button>\n                        <Button\n                            color=\"primary\"\n                            disabled={this.state.disabled}\n                            onClick={this.handleSaveClick.bind(this)}\n                        >\n                            {this.props.submitButtonText}\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Fragment>\n        );\n    }\n}\nDropzoneDialog.defaultProps = {\n    open: false,\n    acceptedFiles: ['image/*', 'video/*', 'application/*'],\n    filesLimit: 3,\n    maxFileSize: 3000000,\n    showPreviews: true,\n    showPreviewsInDropzone: false,\n    showFileNamesInPreview: true,\n    previewChipProps: {},\n    showAlerts: true,\n    clearOnUnmount: true,\n    dialogTitle: 'Upload file',\n    dialogProps: {},\n    submitButtonText: 'Submit',\n    cancelButtonText: 'Cancel',\n    maxWidth: 'sm',\n    fullWidth: true,\n    onSave: () => { },\n    onDelete: () => { },\n    onClose: () => { },\n    onChange: () => { },\n    onDrop: () => { },\n    onDropRejected: () => { },\n    logEvents: false,\n};\n\nDropzoneDialog.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onSave: PropTypes.func,\n    onDelete: PropTypes.func,\n    onClose: PropTypes.func,\n    onChange: PropTypes.func,\n    onDrop: PropTypes.func,\n    onDropRejected: PropTypes.func,\n    acceptedFiles: PropTypes.array,\n    filesLimit: PropTypes.number,\n    maxFileSize: PropTypes.number,\n    dropzoneText: PropTypes.string,\n    showPreviews: PropTypes.bool,\n    showPreviewsInDropzone: PropTypes.bool,\n    showFileNames: PropTypes.bool,\n    showFileNamesInPreview: PropTypes.bool,\n    useChipsForPreview: PropTypes.bool,\n    previewChipProps: PropTypes.object,\n    showAlerts: PropTypes.bool,\n    clearOnUnmount: PropTypes.bool,\n    dialogTitle: PropTypes.string,\n    dialogProps: PropTypes.object,\n    submitButtonText: PropTypes.string,\n    cancelButtonText: PropTypes.string,\n    maxWidth: PropTypes.string,\n    fullWidth: PropTypes.bool,\n    logEvents: PropTypes.bool,\n};\n\nexport default DropzoneDialog;\n"],"names":["url","fetch","response","blob","type","data","replace","split","pop","File","filename","ext","metadata","PreviewList","props","fileObjects","handleRemove","showFileNames","useChipsForPreview","previewChipProps","classes","map","fileObject","i","React","key","Chip","file","name","container","spacing","img","isImage","className","smallPreviewImg","role","src","AttachFileIcon","xs","imageContainer","removeBtn","DeleteIcon","propTypes","PropTypes","object","isRequired","arrayOf","func","bool","withStyles","variantIcon","CheckCircleIcon","WarningIcon","ErrorIcon","InfoIcon","SnackbarContentWrapper","message","onClose","variant","other","Icon","SnackbarContent","clsx","id","icon","iconVariant","close","CloseIcon","string","node","oneOf","theme","green","palette","error","dark","primary","amber","DropzoneArea","fileIndex","event","stopPropagation","_this2","state","filter","splice","setState","onDelete","onChange","getFileRemovedMessage","handleCloseSnackbar","dropzoneText","filesArray","this","initialFiles","prevProps","clearOnUnmount","urls","createFileFromUrl","FileReader","onload","_this3","concat","target","result","readAsDataURL","log","files","_this","filesLimit","length","getFileLimitExceedMessage","count","Array","isArray","forEach","reader","_this4","onDrop","getFileAddedMessage","rejectedFiles","evt","rejectedFile","_this5","getDropRejectMessage","acceptedFiles","maxFileSize","onDropRejected","showPreviews","showPreviewsInDropzone","join","bind","handleDropRejected","dropzoneClass","dropZone","stripes","rejectStripes","dropzoneTextStyle","dropzoneParagraph","dropzoneParagraphClass","CloudUploadIcon","uploadIconSize","showFileNamesInPreview","showAlerts","openSnackBar","snackbarVariant","snackbarMessage","Component","defaultProps","fileName","filesize","includes","size","array","number","DropzoneDialog","prevState","open","logEvents","onSave","dialogProps","handleClose","maxWidth","fullWidth","dialogTitle","cancelButtonText","disabled","handleSaveClick","submitButtonText"],"mappings":"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"}